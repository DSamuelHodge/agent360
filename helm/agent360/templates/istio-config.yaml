apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: {{ .Release.Name }}-gateway
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
      tls:
        httpsRedirect: true
    - port:
        number: 443
        name: https
        protocol: HTTPS
      hosts:
        - "*"
      tls:
        mode: SIMPLE
        credentialName: {{ .Values.tls.secretName }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ .Release.Name }}-vs
  namespace: {{ .Release.Namespace }}
spec:
  hosts:
    - "*"
  gateways:
    - {{ .Release.Name }}-gateway
  http:
    - match:
        - uri:
            prefix: /api
      route:
        - destination:
            host: {{ .Release.Name }}-api
            port:
              number: 80
    - match:
        - uri:
            prefix: /metrics
      route:
        - destination:
            host: prometheus-server
            port:
              number: 80
    - match:
        - uri:
            prefix: /grafana
      route:
        - destination:
            host: grafana
            port:
              number: 80
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: {{ .Release.Name }}-authz
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  rules:
    - from:
        - source:
            principals: ["cluster.local/ns/{{ .Release.Namespace }}/sa/{{ .Release.Name }}-sa"]
      to:
        - operation:
            methods: ["GET", "POST"]
            paths: ["/api/*"]
    - from:
        - source:
            namespaces: ["monitoring"]
      to:
        - operation:
            methods: ["GET"]
            paths: ["/metrics"]
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {{ .Release.Name }}-dr
  namespace: {{ .Release.Namespace }}
spec:
  host: {{ .Release.Name }}-api
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http2MaxRequests: 1000
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
