replicaCount: 3

image:
  repository: ghcr.io/your-org/agent360
  tag: latest
  pullPolicy: Always

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: agent360.example.com
      paths:
        - path: /
          pathType: Prefix

environment: production

tls:
  secretName: agent360-tls

api:
  replicas: 3
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 4Gi
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /ready
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5

redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
  master:
    persistence:
      size: 20Gi
  replica:
    replicaCount: 2
    persistence:
      size: 20Gi

cassandra:
  enabled: true
  cluster:
    name: agent360
    replicaCount: 3
  persistence:
    size: 100Gi
  resources:
    requests:
      memory: 4Gi
      cpu: 2
    limits:
      memory: 8Gi
      cpu: 4

redpanda:
  replicas: 3
  storage:
    size: 50Gi
  resources:
    requests:
      memory: 2Gi
      cpu: 1
    limits:
      memory: 4Gi
      cpu: 2

temporal:
  enabled: true
  server:
    replicaCount: 3
  persistence:
    enabled: true
    size: 50Gi
  elasticsearch:
    enabled: true
  metrics:
    enabled: true
  cassandra:
    enabled: false
    external:
      enabled: true
      hosts:
        - cassandra-0.cassandra
        - cassandra-1.cassandra
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true

kong:
  enabled: true
  ingressController:
    enabled: true
  proxy:
    tls:
      enabled: true
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  replicaCount: 3
  image:
    repository: kong
    tag: "3.4"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: "2"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  service:
    type: LoadBalancer
  env:
    - name: KONG_PLUGINS
      value: bundled,jwt,oauth2,cors,prometheus,zipkin,rate-limiting,request-transformer,response-transformer,circuit-breaker
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8100"
  config:
    redis:
      host: redis
      port: 6379
      database: 0
    jwt:
      key_claim_name: kid
      claims_to_verify:
        - exp
      maximum_expiration: 3600
    oauth2:
      scopes:
        - tools:read
        - tools:write
      token_expiration: 7200
      enable_authorization_code: true
      enable_client_credentials: true
    rateLimit:
      agent_api:
        minute: 60
      tools_api:
        minute: 30
    cors:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
      headers:
        - Authorization
        - Content-Type
      exposed_headers:
        - X-Auth-Token
      credentials: true
      max_age: 3600
    tracing:
      enabled: true
      endpoint: http://jaeger-collector:9411/api/v2/spans
      sample_ratio: 1.0
    circuitBreaker:
      timeout: 10000
      failures: 5
      reset_timeout: 60000

prometheus:
  alertmanager:
    enabled: true
  pushgateway:
    enabled: true
  server:
    retention: 15d
    persistentVolume:
      size: 50Gi

grafana:
  persistence:
    enabled: true
    size: 10Gi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: default
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards
  dashboardsConfigMaps:
    - configMapName: agent360-grafana-dashboards
      fileName: agent-dashboard.json

networkPolicies:
  enabled: true

monitoring:
  enabled: true
  scrapeInterval: 15s

config:
  environment: production
  logging:
    level: INFO
    format: json
  monitoring:
    prometheus:
      enabled: true
      port: 8000
  agent:
    maxConcurrentTasks: 100
    defaultTimeoutSeconds: 300
